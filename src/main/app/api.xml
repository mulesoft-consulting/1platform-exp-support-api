<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:account-apispec="http://www.mulesoft.org/schema/mule/account-apispec" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/account-apispec http://www.mulesoft.org/schema/mule/account-apispec/current/mule-account-apispec.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:listener-config name="api-httpListenerConfig" host="0.0.0.0" port="${https.port}" doc:name="HTTP Listener Configuration" protocol="HTTPS">
        <tls:context>
            <tls:key-store type="jks" path="${keystore.path}" keyPassword="${keystore.password}" password="${keystore.password}" />
        </tls:context>
    </http:listener-config>
    <apikit:config name="api-config" raml="api.raml" extensionEnabled="true" consoleEnabled="false" doc:name="Router" />
    <flow name="api-main">
        <http:listener config-ref="api-httpListenerConfig" path="/api/*" doc:name="HTTP" />
        <apikit:router config-ref="api-config" doc:name="APIkit Router" />
        <exception-strategy ref="api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="api-console">
        <http:listener config-ref="api-httpListenerConfig" path="/console/*" doc:name="HTTP" />
        <apikit:console config-ref="api-config" doc:name="APIkit Console" />
    </flow>
    <sub-flow name="getOrderdByIdSubFlow">
        <logger message="Called by id: #[flowVars.id]" level="INFO" doc:name="Logger" />
        <http:request config-ref="HTTP_Request_Order_Configuration" path="/orders/{id}" method="GET" doc:name="Get Orders By Order ID">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>
                <http:header headerName="client_id" value="${app.client_id}"/>
                <http:header headerName="client_secret" value="${app.client_secret}"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Build Response">
            <dw:input-payload doc:sample="sample_data/json_1.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var today = now as :localdatetime {format:"yyyy-MM-dd'T'HH:MM"}

---
{
	entries: [{
		accountId: payload.customerId,
		id: payload.orderId,
		name: null,
		orderDate: payload.orderDateTime default today,
		sourceSystem: payload.sourceSystem,
		status: payload.status,
		totalPrice: payload.totalAmount,
		trackingNumber: payload.trackingNumber as :string
	}]
}]]></dw:set-payload>
            <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
200]]></dw:set-property>
        </dw:transform-message>
        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <sub-flow name="getOrdersByAccountSubFlow">
        <logger level="INFO" doc:name="Logger" message="Called by id: #[payload.accountId]"/>
        <http:request config-ref="HTTP_Request_CustomerOrder_Configuration" path="/customer360s/{id}" method="GET" doc:name="Get Orders By Account ID">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[payload.accountId]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>
                <http:header headerName="client_id" value="${app.client_id}"/>
                <http:header headerName="client_secret" value="${app.client_secret}"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Build Response">
            <dw:input-payload doc:sample="sample_data/json.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var today = now as :localdatetime {format:"yyyy-MM-dd'T'HH:MM"}
---
{ entries:
		(payload.orders map ((order , indexOfOrder) -> {
			accountId: payload.id,
			(caseId: flowVars.caseId) when flowVars.caseId != null,
			id: order.orderId,
			orderDate: order.orderDateTime default today,
			sourceSystem: order.sourceSystem,
			status: order.status,
			totalPrice: order.totalAmount,
			trackingNumber: order.trackingNumber as :string
		})) when inboundProperties.'http.status' == 200 otherwise []
}]]></dw:set-payload>
            <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
200]]></dw:set-property>
        </dw:transform-message>
        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="get:/orders:api-config">
        <logger message="Get Orders was Called!" level="INFO" doc:name="Logger" />
        <set-variable variableName="mfilter" value="#[message.inboundProperties.'http.query.params'.filter]" doc:name="Variable" />
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var tFilter = (flowVars.mfilter splitBy " ") when flowVars.mfilter != null otherwise []
---
{
	accountId: ((tFilter[2] replace "'" with "") replace ")" with "") when ((tFilter[0] replace "(" with "") == 'accountId') otherwise null,
	orderId: ((tFilter[2] replace "'" with "")  replace ")" with "") when ((tFilter[0] replace "(" with "") == 'id') otherwise null,
	caseId: ((tFilter[2] replace "'" with "")  replace ")" with "") when ((tFilter[0] replace "(" with "") == 'caseId') otherwise null,
	isFilter: true when (flowVars.mfilter != null) otherwise false
}]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Choice - Which Query">
            <when expression="#[payload.orderId != null]">
                <set-variable variableName="id" value="#[payload.orderId]" doc:name="Set id flow var" />
                <flow-ref name="getOrderdByIdSubFlow" doc:name="getOrderdByIdSubFlow" />                
            </when>
            <when expression="#[payload.accountId != null]">
                <logger message="Filter accountId: #[payload.accountId]" level="INFO" doc:name="Logger" />
                <flow-ref name="getOrdersByAccountSubFlow" doc:name="getOrdersByAccountSubFlow" />
            </when>
            <when expression="#[payload.caseId != null]">
                <logger message="Filter CaseId: #[payload.caseId]" level="INFO" doc:name="Logger" />
                <set-variable variableName="caseId" value="#[payload.caseId]" doc:name="Variable" />
                <flow-ref name="getAccountByCaseIdFlow" doc:name="getAccountByCaseIdFlow"/>
            </when>
            <otherwise>
                <scripting:transformer doc:name="Groovy - Throw 404">
                    <scripting:script engine="Groovy"><![CDATA[throw new org.mule.module.apikit.exception.NotFoundException("Not found");]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </flow>
    <flow name="put:/orders/{id}:application/json:api-config">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
    </flow>
    <flow name="delete:/orders/{id}:api-config">
        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
    </flow>
    <flow name="getAccountByCaseIdFlow">
        <logger message="&quot;Estoy en subfow&quot;" level="INFO" category="&quot;@@@@@@@&quot;" doc:name="Logger"/>
        <http:request config-ref="HTTP_Request_SFDC_Account_Configuration" path="/accounts" method="GET" doc:name="Get Account By Case ID">
            <http:request-builder>
                <http:query-param paramName="caseId" value="#[flowVars.caseId]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>
                <http:header headerName="client_id" value="${app.client_id}"/>
                <http:header headerName="client_secret" value="${app.client_secret}"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="convert to java">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <validation:is-true exceptionClass="org.mule.module.apikit.exception.NotFoundException" expression="#[payload.accounts.size() &gt; 0]" doc:name="Validate is not empty"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	accountId: payload.accounts[0].accountId
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="getOrdersByAccountSubFlow" doc:name="getOrdersByAccountSubFlow"/>
    </flow>

    <flow name="get:/orders/{id}:api-config">
        <logger message="Call Get By ID" level="INFO" category="@@@@@@@" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{   
	"entries": [     
		{       
			"accountId": "0010b00002BKlrbAAD",       
			"id": "0000021117",       
			"orderDate": "2018-03-13",       
			"sourceSystem": "SAP",       
			"status": "confirmed",       
			"totalPrice": 500,       
			"trackingNumber": "0000021117"     
		}
	] 
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <!-- <flow-ref name="getById_SubFlow" doc:name="getById_SubFlow"/> -->
    </flow>
    <flow name="post:/orders:application/json:api-config">
        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload"/>
    </flow>
    <apikit:mapping-exception-strategy name="api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
